//
//  LockedMacro+MacroError.swift
//
//  Created by Gray Campbell.
//  Copyright Â© 2025 Fetch.
//

import Foundation

extension LockedMacro {

    /// An error generated by ``LockedMacro``.
    enum MacroError: Error, CaseIterable, CustomStringConvertible {

        // MARK: Cases

        /// An error indicating that the `@Locked` macro can only be applied to
        /// property declarations.
        case canOnlyBeAppliedToPropertyDeclarations

        /// An error indicating that the `@Locked` macro can only be applied to
        /// property declarations with a `var` binding specifier.
        case canOnlyBeAppliedToPropertyDeclarationsWithVarBindingSpecifier

        /// An error indicating that the `@Locked` macro can only be applied to
        /// single-binding property declarations.
        case canOnlyBeAppliedToSingleBindingPropertyDeclarations

        /// An error indicating that the `@Locked` macro can only be applied to
        /// property declarations with an identifier binding pattern.
        case canOnlyBeAppliedToPropertyDeclarationsWithIdentifierBindingPattern

        /// An error indicating that the `@Locked` macro was unable to parse a
        /// type from the property declaration's binding.
        case unableToParseType

        /// An error indicating that the `@Locked` macro was not passed any
        /// arguments.
        case noArguments

        /// An error indicating that the `@Locked` macro was unable to parse the
        /// provided `lockType` argument.
        case unableToParseLockTypeArgument

        // MARK: Properties

        /// The description of the error.
        var description: String {
            switch self {
            case .canOnlyBeAppliedToPropertyDeclarations:
                "@Locked can only be applied to property declarations."
            case .canOnlyBeAppliedToPropertyDeclarationsWithVarBindingSpecifier:
                "@Locked can only be applied to `var` property declarations."
            case .canOnlyBeAppliedToSingleBindingPropertyDeclarations:
                "@Locked can only be applied to single-binding property declarations."
            case .canOnlyBeAppliedToPropertyDeclarationsWithIdentifierBindingPattern:
                """
                @Locked can only be applied to property declarations with an \ 
                identifier binding pattern.
                """
            case .unableToParseType:
                "@Locked was unable to parse a type from the property declaration's binding."
            case .noArguments:
                "@Locked was not passed any arguments."
            case .unableToParseLockTypeArgument:
                "@Locked was unable to parse the provided `lockType` argument."
            }
        }
    }
}
